# Licensed under the MIT License
# https://github.com/craigahobbs/bare-script/blob/main/LICENSE


#
# The BareScript library documentation application
#


#
# url - The library documentation JSON resource URL
# title - The library title
# menuLinks - Optional array of text/URL menu link tuples
# groupURLs - Optional map of group name to Markdown URL ('' is index)
#
async function bareDocMain(url, title, menuLinks, groupURLs):
    # URL override?
    url = if(vURL != null, vURL, url)
    if arrayLength(url) != null:
        urls = url
        url = arrayJoin(urls, ', ')
    else:
        urls = arrayNew(url)
    endif
    title = if(title != null && vURL == null, title, url)

    # Fetch and validate the library documentation resource
    groups = objectNew()
    for libraryPart, ixLibrary in systemFetch(urls):
        libraryPart = schemaValidate(bareDocTypes, 'Library', libraryPart)
        if libraryPart == null:
            libraryURL = arrayGet(urls, ixLibrary)
            markdownPrint('**Error:** Failed to fetch library documentation resource "' + markdownEscape(libraryURL) + '"')
            return
        endif

        # Group the function documentation
        for function_ in objectGet(libraryPart, 'functions'):
            groupName = objectGet(function_, 'group')
            groupFunctions = objectGet(groups, groupName)
            if groupFunctions == null:
                groupFunctions = arrayNew()
                objectSet(groups, groupName, groupFunctions)
            endif
            arrayPush(groupFunctions, function_)
        endfor
    endfor

    # Sort the group functions
    for groupName in objectKeys(groups):
        groupFunctions = objectGet(groups, groupName)
        arraySort(groupFunctions, functionCompare)

        # Function requested by name?
        if vName != null:
            for function_ in groupFunctions:
                functionName = objectGet(function_, 'name')
                if functionName == vName:
                    # Redirect to the actual URL
                    functionURL = bareDocURL(objectNew('group', objectGet(function_, 'group'))) + '&' + markdownHeaderId(functionName)
                    windowSetLocation(functionURL)
                    return
                endif
            endfor
        endif
    endfor
    if vName != null:
        markdownPrint('', '**Error:** Unknown function "' + markdownEscape(vName) + '"')
        return
    endif

    # Render the page
    if vDoc:
        documentSetTitle(title + ' - Library')
        elementModelRender(schemaElements(bareDocTypes, 'Library'))
    elif vGroup != null:
        bareDocGroupPage(title, groupURLs, groups, vGroup)
    else:
        bareDocIndexPage(title, menuLinks, groupURLs, groups)
    endif
endfunction


function functionCompare(f1, f2):
    f1Name = objectGet(f1, 'name')
    f2Name = objectGet(f2, 'name')
    return if(f1Name < f2Name, -1, if(f1Name == f2Name, 0, 1))
endfunction


async function bareDocIndexPage(title, menuLinks, groupURLs, groups):
    # Render the menu and title
    documentSetTitle(title)
    for menuLink, ixMenuLink in menuLinks:
        menuLinkText = arrayGet(menuLink, 0)
        menuLinkURL = arrayGet(menuLink, 1)
        markdownPrint(if(ixMenuLink == 0, '', '| ') + '[' + markdownEscape(menuLinkText) + '](' + menuLinkURL + ')')
    endfor
    markdownPrint('', '# ' + markdownEscape(title))

    # Render the index Markdown, if any
    if objectHas(groupURLs, ''):
        rootURL = objectGet(groupURLs, '')
        rootMarkdown = systemFetch(rootURL, null, true)
        markdownPrint('', if(rootMarkdown != null, rootMarkdown, 'Error: Failed to load "' + markdownEscape(rootURL) + '"'))
    endif

    # Render the library function index
    for groupKey in arraySort(objectKeys(groups)):
        markdownPrint('', '## [' + markdownEscape(groupKey) + '](' + bareDocURL(objectNew('group', groupKey)) + ')')
    endfor
endfunction


async function bareDocGroupPage(title, groupURLs, groups, groupName):
    # Set the document title
    documentSetTitle(title + ' - ' + groupName)

    # Group exist?
    if !objectHas(groups, groupName):
        markdownPrint('', '**Error:** Unknown group "' + markdownEscape(groupName) + '"')
        return
    endif

    # Render the menu and title
    markdownPrint( \
        '[Index](' + bareDocURL(objectNew('group', '')) + ')', \
        '', \
        '# ' + markdownEscape(groupName) \
    )

    # Render the group Markdown, if any
    if objectHas(groupURLs, groupName):
        groupURL = objectGet(groupURLs, groupName)
        groupMarkdown = systemFetch(groupURL, null, true)
        markdownPrint('', if(groupMarkdown != null, groupMarkdown, 'Error: Failed to load "' + markdownEscape(groupURL) + '"'))
    endif

    # Render the group function index
    markdownPrint('', '## Function Index')
    for function_, ixFunction in objectGet(groups, groupName):
        functionName = objectGet(function_, 'name')
        markdownPrint('- [' + markdownEscape(functionName) + '](' + bareDocURL() + '&' + markdownHeaderId(functionName) + ')')
    endfor

    # Render the group function documentation
    for function_ in objectGet(groups, groupName):
        # Render the function header
        markdownPrint( \
            '', \
            '---', \
            '', \
            '## ' + markdownEscape(objectGet(function_, 'name')), \
            '', \
            objectGet(function_, 'doc') \
        )

        # Render the functions's argument documentation
        markdownPrint('', '### Arguments')
        arguments = objectGet(function_, 'args')
        if arguments != null:
            for argument in arguments:
                markdownPrint('', '**' + markdownEscape(objectGet(argument, 'name')) + ' -** ', objectGet(argument, 'doc'))
            endfor
        else:
            markdownPrint('None')
        endif

        # Render the function's return documentation
        markdownPrint('', '### Returns')
        returnDoc = objectGet(function_, 'return')
        markdownPrint('', if(returnDoc != null, returnDoc, 'Nothing'))
    endfor
endfunction


function bareDocURL(args):
    # Arguments overrides
    group = objectGet(args, 'group')
    url = objectGet(args, 'url')

    # Variable arguments
    group = if(group != null, group, vGroup)
    url = if(url != null, url, vURL)

    # Cleared arguments
    group = if(group != null && stringLength(group) > 0, group)

    # Create the link
    parts = arrayNew()
    if(group != null, arrayPush(parts, "var.vGroup='" + urlEncodeComponent(group) + "'"))
    if(url != null, arrayPush(parts, "var.vURL='" + urlEncodeComponent(url) + "'"))
    return if(arrayLength(parts) != 0, '#' + arrayJoin(parts, '&'), '#var=')
endfunction


# The library documentation schema
bareDocTypes = schemaParse( \
    '# A library documentation model', \
    'struct Library', \
    '', \
    '    # The library functions', \
    '    Function[len > 0] functions', \
    '', \
    '', \
    '# A library function', \
    'struct Function', \
    '', \
    '    # The function name', \
    '    string(len > 0) name', \
    '', \
    '    # The function group (e.g. "Math")', \
    '    string(len > 0) group', \
    '', \
    "    # The function's documentation Markdown lines", \
    '    string[len > 0] doc', \
    '', \
    '    # The function arguments', \
    '    optional FunctionArgument[len > 0] args', \
    '', \
    "    # The function return's documentation Markdown lines", \
    '    optional string[len > 0] return', \
    '', \
    '', \
    '# A function argument', \
    'struct FunctionArgument', \
    '', \
    '    # The argument name', \
    '    string(len > 0) name', \
    '', \
    "    # The argument's documentation Markdown lines", \
    '    string[len > 0] doc' \
)
