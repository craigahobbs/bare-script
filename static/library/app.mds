# Licensed under the MIT License
# https://github.com/craigahobbs/calc-script/blob/main/LICENSE


#
# The CalcScript library documentation application
#


#
# url - The library documentation JSON resource URL
# title - The library title
# menuLinks - Optional array of text/URL menu link tuples
#
async function calcScriptLibraryDoc(url, title, menuLinks)
    # URL override?
    url = if(vURL != null, vURL, url)
    if arrayLength(url) != null:
        urls = url
        url = arrayJoin(urls, ', ')
    else:
        urls = arrayNew(url)
    endif
    title = if(title != null && vURL == null, title, url)

    # Fetch and validate the library documentation resource
    libraryFunctions = arrayNew()
    library = objectNew('functions', libraryFunctions)
    for libraryPart, ixLibrary in httpFetch(urls):
        libraryPart = schemaValidate(calcScriptLibraryTypes, 'Library', libraryPart)
        if libraryPart == null:
            libraryURL = arrayGet(urls, ixLibrary)
            markdownPrint('**Error:** Failed to fetch library documentation resource "' + markdownEscape(libraryURL) + '"')
            return
        endif
        arrayExtend(libraryFunctions, objectGet(libraryPart, 'functions'))
    endfor

    # Render the page
    if vDoc:
        setDocumentTitle(title + ' - Library')
        elementModelRender(schemaElements(calcScriptLibraryTypes, 'Library'))
    elif vName != null:
        calcScriptLibraryFunctionPage(library, title, vName)
    else:
        calcScriptLibraryIndexPage(library, title, menuLinks)
    endif
endfunction


function calcScriptLibraryIndexPage(library, title, menuLinks)
    # Set the page title
    setDocumentTitle(title)
    markdownPrint('# ' + title)

    # Render the index menu
    markdownPrint('', if(vExpand, '[Collapse](', '[Expand](') + calcScriptLibraryURL(objectNew('expand', !vExpand, 'group', '')) + ')')
    for menuLink in menuLinks:
        menuLinkText = arrayGet(menuLink, 0)
        menuLinkURL = arrayGet(menuLink, 1)
        markdownPrint('| [' + markdownEscape(menuLinkText) + '](' + menuLinkURL + ')')
    endfor

    # Group the function documentation
    consoleLogDebug('Library has ' + arrayLength(objectGet(library, 'functions')) + ' functions')
    groups = objectNew()
    for function_ in objectGet(library, 'functions'):
        group = objectGet(function_, 'group')
        groupFunctions = objectGet(groups, group)
        if groupFunctions == null:
            groupFunctions = arrayNew()
            objectSet(groups, group, groupFunctions)
        endif
        arrayPush(groupFunctions, objectGet(function_, 'name'))
    endfor

    # Render the library function index
    groupKeys = arraySort(objectKeys(groups))
    for groupKey in groupKeys:
        # Render the group key link
        if vExpand:
            markdownPrint('## ' + markdownEscape(groupKey))
        elif vGroup != groupKey:
            markdownPrint('', '## [' + markdownEscape(groupKey) + '](' + calcScriptLibraryURL(objectNew('group', groupKey)) + ')')
        else:
            markdownPrint('', '## [' + markdownEscape(groupKey) + '](' + calcScriptLibraryURL(objectNew('group', '')) + ')')
        endif

        # Render the group's function links
        if vExpand || vGroup == groupKey:
            for functionName in arraySort(objectGet(groups, groupKey)):
                markdownPrint('', '[' + markdownEscape(functionName) + '](' + calcScriptLibraryURL(objectNew('name', functionName)) + ')')
            endfor
        endif
    endfor
endfunction


function calcScriptLibraryFunctionPage(libDoc, title, functionName)
    # Set the document title
    setDocumentTitle(title + ' - ' + functionName)

    # Function exist?
    functionFound = false
    for function_ in objectGet(libDoc, 'functions'):
        if functionName == objectGet(function_, 'name'):
            functionFound = true
            break
        endif
    endfor
    if !functionFound:
        markdownPrint('', '**Error:** Unknown function "' + functionName + '"')
        return
    endif
    functionGroup = objectGet(function_, 'group')

    # Render the page title and menu
    markdownPrint('# ' + title)
    markdownPrint('', '[Index](' + calcScriptLibraryURL(objectNew('name', '')) + '&' + markdownHeaderId(functionGroup) + ')')
    markdownPrint('', '## ' + functionName, '', objectGet(function_, 'doc'))

    # Render the functions's argument documentation
    markdownPrint('', '### Arguments')
    arguments = objectGet(function_, 'args')
    if arguments != null:
        for argument in arguments:
            markdownPrint('', '**' + objectGet(argument, 'name') + ' -** ', objectGet(argument, 'doc'))
        endfor
    else:
        markdownPrint('None')
    endif

    # Render the function's return documentation
    markdownPrint('', '### Returns')
    returnDoc = objectGet(function_, 'return')
    markdownPrint('', if(returnDoc != null, returnDoc, 'Nothing'))
endfunction


function calcScriptLibraryURL(args)
    # Arguments overrides
    expand = objectGet(args, 'expand')
    group = objectGet(args, 'group')
    name = objectGet(args, 'name')
    url = objectGet(args, 'url')

    # Variable arguments
    expand = if(expand != null, expand, vExpand)
    group = if(group != null, group, vGroup)
    name = if(name != null, name, vName)
    url = if(url != null, url, vURL)

    # Cleared arguments
    group = if(group != null && stringLength(group) > 0, group)
    name = if(name != null && stringLength(name) > 0, name)

    # Create the link
    parts = arrayNew()
    if(expand != null && expand, arrayPush(parts, 'var.vExpand=1'))
    if(group != null, arrayPush(parts, "var.vGroup='" + urlEncodeComponent(group) + "'"))
    if(name != null, arrayPush(parts, "var.vName='" + urlEncodeComponent(name) + "'"))
    if(url != null, arrayPush(parts, "var.vURL='" + urlEncodeComponent(url) + "'"))
    return if(arrayLength(parts) != 0, '#' + arrayJoin(parts, '&'), '#var=')
endfunction


# The library documentation schema
calcScriptLibraryTypes = schemaParse( \
    '# A library documentation model', \
    'struct Library', \
    '', \
    '    # The library functions', \
    '    Function[len > 0] functions', \
    '', \
    '# A library function', \
    'struct Function', \
    '', \
    '    # The function name', \
    '    string(len > 0) name', \
    '', \
    '    # The function group (e.g. "Math")', \
    '    string(len > 0) group', \
    '', \
    "    # The function's documentation Markdown lines", \
    '    string[len > 0] doc', \
    '', \
    '    # The function arguments', \
    '    optional FunctionArgument[len > 0] args', \
    '', \
    "    # The function return's documentation Markdown lines", \
    '    optional string[len > 0] return', \
    '', \
    '# A function argument', \
    'struct FunctionArgument', \
    '', \
    '    # The argument name', \
    '    string(len > 0) name', \
    '', \
    "    # The argument's documentation Markdown lines", \
    '    string[len > 0] doc' \
)
